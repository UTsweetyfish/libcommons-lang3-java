Description: Fixes the compatibility with Easymock 4
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: no
--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java
+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java
@@ -53,7 +53,7 @@
         //for fun, show that the same empty instance is used
         assertSame(empty, listenerSupport.getListeners());
 
-        final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class);
+        final VetoableChangeListener listener1 = (VetoableChangeListener) EasyMock.createNiceMock(VetoableChangeListener.class);
         listenerSupport.addListener(listener1);
         assertEquals(1, listenerSupport.getListeners().length);
         listenerSupport.addListener(listener1, false);
@@ -121,10 +121,10 @@
         //for fun, show that the same empty instance is used
         assertSame(empty, listenerSupport.getListeners());
 
-        final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class);
+        final VetoableChangeListener listener1 = (VetoableChangeListener) EasyMock.createNiceMock(VetoableChangeListener.class);
         listenerSupport.addListener(listener1);
         assertEquals(1, listenerSupport.getListeners().length);
-        final VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class);
+        final VetoableChangeListener listener2 = (VetoableChangeListener) EasyMock.createNiceMock(VetoableChangeListener.class);
         listenerSupport.addListener(listener2);
         assertEquals(2, listenerSupport.getListeners().length);
         listenerSupport.removeListener(listener1);
@@ -138,7 +138,7 @@
         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);
         listenerSupport.addListener(e -> {
         });
-        listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class));
+        listenerSupport.addListener((VetoableChangeListener) EasyMock.createNiceMock(VetoableChangeListener.class));
 
         //serialize:
         final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
@@ -196,7 +196,7 @@
             }
         };
 
-        final VetoableChangeListener listener = EasyMock.createNiceMock(VetoableChangeListener.class);
+        final VetoableChangeListener listener = (VetoableChangeListener) EasyMock.createNiceMock(VetoableChangeListener.class);
         eventListenerSupport.addListener(listener);
         final Object source = new Date();
         final PropertyChangeEvent ignore = new PropertyChangeEvent(source, "Hour", 5, 6);
--- a/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java
+++ b/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java
@@ -97,7 +97,7 @@
      */
     @Test
     public void testBuilderReset() {
-        final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class);
+        final ThreadFactory wrappedFactory = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
         final Thread.UncaughtExceptionHandler exHandler = EasyMock
                 .createMock(Thread.UncaughtExceptionHandler.class);
         EasyMock.replay(wrappedFactory, exHandler);
@@ -116,7 +116,7 @@
      */
     @Test
     public void testBuilderResetAfterBuild() {
-        builder.wrappedFactory(EasyMock.createNiceMock(ThreadFactory.class))
+        builder.wrappedFactory((ThreadFactory) EasyMock.createNiceMock(ThreadFactory.class))
                 .namingPattern(PATTERN).daemon(true).build();
         checkFactoryDefaults(builder.build());
     }
@@ -126,8 +126,8 @@
      */
     @Test
     public void testNewThreadNamingPattern() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final int count = 12;
         for (int i = 0; i < count; i++) {
             EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread());
@@ -149,8 +149,8 @@
      */
     @Test
     public void testNewThreadNoNamingPattern() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final String name = "unchangedThreadName";
         final Thread t = new Thread(name);
         EasyMock.expect(wrapped.newThread(r)).andReturn(t);
@@ -167,8 +167,8 @@
      * @param flag the value of the flag
      */
     private void checkDaemonFlag(final boolean flag) {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final Thread t = new Thread();
         EasyMock.expect(wrapped.newThread(r)).andReturn(t);
         EasyMock.replay(wrapped, r);
@@ -201,9 +201,9 @@
      */
     @Test
     public void testNewThreadNoDaemonFlag() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r1 = EasyMock.createMock(Runnable.class);
-        final Runnable r2 = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r1 = (Runnable) EasyMock.createMock(Runnable.class);
+        final Runnable r2 = (Runnable) EasyMock.createMock(Runnable.class);
         final Thread t1 = new Thread();
         final Thread t2 = new Thread();
         t1.setDaemon(true);
@@ -223,8 +223,8 @@
      */
     @Test
     public void testNewThreadPriority() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final Thread t = new Thread();
         EasyMock.expect(wrapped.newThread(r)).andReturn(t);
         EasyMock.replay(wrapped, r);
@@ -242,8 +242,8 @@
      */
     @Test
     public void testNewThreadNoPriority() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final int orgPriority = Thread.NORM_PRIORITY + 1;
         final Thread t = new Thread();
         t.setPriority(orgPriority);
@@ -260,8 +260,8 @@
      */
     @Test
     public void testNewThreadExHandler() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final Thread.UncaughtExceptionHandler handler = EasyMock
                 .createMock(Thread.UncaughtExceptionHandler.class);
         final Thread t = new Thread();
@@ -280,8 +280,8 @@
      */
     @Test
     public void testNewThreadNoExHandler() {
-        final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
-        final Runnable r = EasyMock.createMock(Runnable.class);
+        final ThreadFactory wrapped = (ThreadFactory) EasyMock.createMock(ThreadFactory.class);
+        final Runnable r = (Runnable) EasyMock.createMock(Runnable.class);
         final Thread.UncaughtExceptionHandler handler = EasyMock
                 .createMock(Thread.UncaughtExceptionHandler.class);
         final Thread t = new Thread();
